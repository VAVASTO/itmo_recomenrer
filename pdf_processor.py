#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PDF processor for extracting text from ITMO curriculum PDFs
"""

import os
import json
from typing import Dict, List, Optional

class PDFProcessor:
    """Class for processing ITMO curriculum PDFs"""
    
    def __init__(self, pdf_dir: str = "."):
        self.pdf_dir = pdf_dir
        self.curriculum_data = {}
        self._load_curriculum_data()
    
    def _load_curriculum_data(self):
        """Load curriculum data from PDF files and JSON files"""
        # Инициализируем json_program_data перед загрузкой
        self.json_program_data = {}
        
        # Загружаем дополнительные данные из JSON файлов
        self._load_json_program_data()
        
        # Данные из PDF "Управление ИИ-продуктами"
        ai_product_curriculum = {
            "название": "Управление ИИ-продуктами/AI Product",
            "описание": "Магистерская программа по управлению ИИ-продуктами",
            "блоки": {
                "Блок 1. Модули (дисциплины)": {
                    "трудоемкость_зе": 72,
                    "трудоемкость_час": 2592,
                    "обязательные_дисциплины_1_семестр": [
                        {"название": "Продуктовые исследования", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Воркшоп по созданию продукта на данных / Data Product Development Workshop", "зе": 3, "час": 108, "семестр": 1}
                    ],
                    "выборные_дисциплины_1_семестр": [
                        {"название": "Процессы и методологии разработки решений на основе ИИ", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Монетизация ИИ-продуктов", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Стратегический продуктовый менеджмент", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Продуктовый дизайн и прототипирование AI-решений", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Математика для машинного обучения и анализа данных", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Математическая статистика", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Основы программирования на Python", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Основы машинного обучения", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Основы глубокого обучения", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Введение в большие языковые модели (LLM)", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Прикладной анализ временных рядов", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Инженерные практики в ML и анализе данных", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "Прикладные инструменты разработки", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "Разработка веб-приложений (Python Backend)", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "Проектирование микросервисов", "зе": 6, "час": 216, "семестр": 1}
                    ],
                    "выборные_дисциплины_2_семестр": [
                        {"название": "Бизнес-анализ", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Практики менторства и развития в Data Science", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Управление проектами в Data Science", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Метрики и аналитика продукта", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Управление продуктовым портфелем", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Основы маркетинга для ИИ-продуктов", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Управление командами и проектами в ИИ", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Фандрайзинг и бизнес-планирование", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Инженерия данных", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Программирование на Python (продвинутый уровень)", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Прикладные задачи машинного обучения", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Данные в финансовом секторе", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Финансовые технологии", "зе": 3, "час": 108, "семестр": 2},
                        {"название": "Глубокое обучение на практике", "зе": 6, "час": 216, "семестр": 2},
                        {"название": "Проектирование систем машинного обучения (ML System Design)", "зе": 6, "час": 216, "семестр": 2},
                        {"название": "Обработка естественного языка", "зе": 6, "час": 216, "семестр": 2},
                        {"название": "Интеллектуальные агенты и большие языковые модели", "зе": 6, "час": 216, "семестр": 2},
                        {"название": "Воркшоп по прикладному использованию языковых и генеративных моделей", "зе": 6, "час": 216, "семестр": 2},
                        {"название": "Основы построения рекомендательных систем", "зе": 6, "час": 216, "семестр": 2},
                        {"название": "Технологии компьютерного зрения", "зе": 6, "час": 216, "семестр": 2}
                    ]
                },
                "Блок 2. Практика": {
                    "трудоемкость_зе": 42,
                    "трудоемкость_час": 1512,
                    "практики": [
                        {"название": "Производственная, технологическая (проектно-технологическая) практика", "зе": 9, "час": 324, "семестр": 1},
                        {"название": "Производственная, технологическая (проектно-технологическая) практика", "зе": 9, "час": 324, "семестр": 2},
                        {"название": "Производственная, технологическая (проектно-технологическая) практика", "зе": 9, "час": 324, "семестр": 3},
                        {"название": "Производственная, технологическая (проектно-технологическая) практика", "зе": 9, "час": 324, "семестр": 4},
                        {"название": "Производственная, преддипломная практика", "зе": 6, "час": 216, "семестр": 4}
                    ]
                },
                "Блок 3. ГИА": {
                    "трудоемкость_зе": 6,
                    "трудоемкость_час": 216,
                    "аттестация": [
                        {"название": "Подготовка к защите и защита ВКР", "зе": 6, "час": 216, "семестр": 4}
                    ]
                }
            }
        }
        
        # Данные из PDF "Искусственный интеллект"
        ai_curriculum = {
            "название": "Искусственный интеллект",
            "описание": "Магистерская программа по искусственному интеллекту",
            "блоки": {
                "Блок 1. Модули (дисциплины)": {
                    "трудоемкость_зе": 60,
                    "трудоемкость_час": 2160,
                    "обязательные_дисциплины_1_семестр": [
                        {"название": "Воркшоп по созданию продукта на данных / Data Product Development Workshop", "зе": 3, "час": 108, "семестр": 1}
                    ],
                    "выборные_дисциплины_1_семестр": [
                        {"название": "Практика применения машинного обучения", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "Алгоритмы и структуры данных", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Математическая статистика", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Разработка веб-приложений (Python Backend)", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "Программирование на С++", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Введение в МО (Python) и Продвинутое МО (Python)", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Технологии обработки естественного языка", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "Автоматическое машинное обучение", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Обработка и генерация изображений", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Проектирование и разработка рекомендательных систем (продвинутый уровень)", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "Основы глубокого обучения", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Продвинутое МО (Python) и Глубокое обучение", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Введение в большие языковые модели (LLM)", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Проектирование систем машинного обучения (ML System Design)", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "Проектирование микросервисов", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "Хранение больших данных и Введение в МО (Python)", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Вычисления на графических процессорах (GPU)", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "UNIX/Linux системы", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Инструменты разработки data-driven решений", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Контейнеризация и оркестрация приложений", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Продуктовые исследования", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Графические интерфейсы", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Создание интеллектуальных агентов", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "Прикладной анализ временных рядов", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Процессы и методологии разработки решений на основе ИИ", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Инжиниринг управления данными", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Бизнес-аналитика для инженеров", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Математика для машинного обучения и анализа данных", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Языки программирования", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Основы машинного обучения", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Инженерные практики в ML и анализе данных", "зе": 6, "час": 216, "семестр": 1},
                        {"название": "Дополнительные разделы машинного обучения", "зе": 3, "час": 108, "семестр": 1},
                        {"название": "Базы данных", "зе": 3, "час": 108, "семестр": 1}
                    ]
                },
                "Блок 2. Практика": {
                    "трудоемкость_зе": 54,
                    "трудоемкость_час": 1944,
                    "практики": [
                        {"название": "Проектная практика", "зе": 12, "час": 432, "семестр": 1},
                        {"название": "Проектная практика", "зе": 12, "час": 432, "семестр": 2},
                        {"название": "Научно-исследовательская практика", "зе": 12, "час": 432, "семестр": 2},
                        {"название": "Производственная проектно-технологическая практика", "зе": 12, "час": 432, "семестр": 3},
                        {"название": "Производственная, научно-исследовательская практика", "зе": 12, "час": 432, "семестр": 3},
                        {"название": "Проектная работа", "зе": 12, "час": 432, "семестр": 4},
                        {"название": "Научно-исследовательская работа", "зе": 12, "час": 432, "семестр": 4},
                        {"название": "Производственная, преддипломная практика", "зе": 6, "час": 216, "семестр": 4}
                    ]
                },
                "Блок 3. ГИА": {
                    "трудоемкость_зе": 6,
                    "трудоемкость_час": 216,
                    "аттестация": [
                        {"название": "Подготовка к защите и защита ВКР", "зе": 6, "час": 216, "семестр": 4}
                    ]
                }
            }
        }
        
        self.curriculum_data = {
            "ai_product": ai_product_curriculum,
            "ai": ai_curriculum
        }
        
    
    def _load_json_program_data(self):
        """Load additional program data from JSON files"""
        json_files = [
            ("ai", "itmo_program_data_ai.json"),
            ("ai_product", "itmo_program_data_ai_product.json")
        ]
        
        print(f"DEBUG: Загрузка JSON файлов из директории: {self.pdf_dir}")
        
        for program_key, filename in json_files:
            try:
                filepath = os.path.join(self.pdf_dir, filename)
                print(f"DEBUG: Проверяем файл: {filepath}")
                
                if os.path.exists(filepath):
                    print(f"DEBUG: Файл {filename} найден, загружаем...")
                    with open(filepath, 'r', encoding='utf-8') as f:
                        self.json_program_data[program_key] = json.load(f)
                    print(f"DEBUG: Файл {filename} успешно загружен для программы {program_key}")
                else:
                    print(f"DEBUG: Файл {filename} НЕ найден по пути {filepath}")
                    
            except Exception as e:
                print(f"ERROR: Не удалось загрузить {filename}: {e}")
        
        print(f"DEBUG: Загружено JSON файлов: {len(self.json_program_data)}")
        print(f"DEBUG: Ключи загруженных программ: {list(self.json_program_data.keys())}")
    
    def get_curriculum_text(self) -> str:
        """Get formatted curriculum text for AI model"""
        print(f"DEBUG get_curriculum_text: Доступные JSON данные: {list(self.json_program_data.keys())}")
        
        text = "УЧЕБНЫЕ ПЛАНЫ И ИНФОРМАЦИЯ О ПРОГРАММАХ ИТМО:\n\n"
        
        for program_key, program_data in self.curriculum_data.items():
            text += f"=== {program_data['название']} ===\n"
            text += f"Описание: {program_data['описание']}\n\n"
            
            print(f"DEBUG: Обрабатываем программу {program_key}")
            print(f"DEBUG: JSON данные для {program_key} доступны: {program_key in self.json_program_data}")
            
            # Добавляем ПОЛНУЮ информацию из JSON файлов
            if program_key in self.json_program_data:
                print(f"DEBUG: Добавляем JSON данные для программы {program_key}")
                json_data = self.json_program_data[program_key]
                
                text += f"📋 ПОЛНАЯ ИНФОРМАЦИЯ О ПРОГРАММЕ ИЗ JSON:\n"
                text += f"• Название программы: {json_data.get('program_name', 'Не указано')}\n"
                text += f"• URL страницы: {json_data.get('page_url', 'Не указано')}\n"
                
                # Факультет
                if json_data.get('faculty'):
                    faculty = json_data['faculty']
                    text += f"• Факультет: {faculty.get('name', 'Не указано')}\n"
                    text += f"  - Ссылка: {faculty.get('link', 'Не указано')}\n"
                
                # Описание программы
                if json_data.get('description'):
                    desc = json_data['description']
                    text += f"• Краткое описание: {desc.get('short', 'Не указано')}\n"
                    text += f"• Полное описание: {desc.get('full', 'Не указано')}\n"
                
                # Основные параметры
                if json_data.get('main_parameters'):
                    params = json_data['main_parameters']
                    text += f"• Форма обучения: {params.get('study_format', 'Не указано')}\n"
                    text += f"• Длительность: {params.get('duration', 'Не указано')}\n"
                    text += f"• Язык обучения: {params.get('language', 'Не указано')}\n"
                    text += f"• Стоимость: {params.get('tuition_fee_rub_per_year', 'Не указано')} руб/год\n"
                    text += f"• Гос. аккредитация: {'Да' if params.get('state_accreditation') else 'Нет'}\n"
                    text += f"• Военная кафедра: {'Да' if params.get('military_training_center') else 'Нет'}\n"
                    text += f"• Дополнительные возможности: {params.get('additional_options', 'Не указано')}\n"
                
                # Карьерные перспективы
                if json_data.get('career_prospects'):
                    text += f"• Карьерные перспективы: {json_data['career_prospects']}\n"
                
                # Менеджер программы
                if json_data.get('program_manager'):
                    manager = json_data['program_manager']
                    text += f"• Менеджер программы: {manager.get('name', '')} {manager.get('middle_name', '')}\n"
                    if manager.get('degree'):
                        text += f"  - Степень: {manager['degree']}\n"
                    if manager.get('rank'):
                        text += f"  - Звание: {manager['rank']}\n"
                    if manager.get('positions'):
                        text += f"  - Должности:\n"
                        for pos in manager['positions']:
                            text += f"    * {pos.get('position_name', '')} - {pos.get('department_name', '')}\n"
                    if manager.get('contacts'):
                        contacts = manager['contacts']
                        text += f"  - Email: {contacts.get('email', 'Не указан')}\n"
                        text += f"  - Телефон: {contacts.get('phone', 'Не указан')}\n"
                
                # Преподавательский состав
                if json_data.get('teaching_staff'):
                    text += f"• Преподавательский состав ({len(json_data['teaching_staff'])} человек):\n"
                    for i, teacher in enumerate(json_data['teaching_staff'], 1):
                        name = f"{teacher.get('name', '')} {teacher.get('middle_name', '')}"
                        text += f"  {i}. {name.strip()}"
                        if teacher.get('degree'):
                            text += f" ({teacher['degree']})"
                        if teacher.get('rank'):
                            text += f", {teacher['rank']}"
                        text += "\n"
                        
                        # Должности преподавателя
                        if teacher.get('positions'):
                            for position in teacher['positions']:
                                if position.get('position_name'):
                                    text += f"     - {position['position_name']}"
                                    if position.get('department_name'):
                                        text += f" ({position['department_name']})"
                                    text += "\n"
                
                # Направления подготовки
                if json_data.get('fields_of_study'):
                    text += f"• Направления подготовки ({len(json_data['fields_of_study'])} направлений):\n"
                    for field in json_data['fields_of_study']:
                        text += f"  - {field.get('code', '')} {field.get('name', '')}\n"
                        if field.get('admission_quotas'):
                            quotas = field['admission_quotas']
                            text += f"    Квоты приема: Бюджет - {quotas.get('budget_funded', 0)} мест, "
                            text += f"Контракт - {quotas.get('fee_based', 0)} мест, "
                            text += f"Целевые - {quotas.get('targeted', 0)} мест\n"
                
                # Социальные сети и контакты
                if json_data.get('social_media'):
                    social = json_data['social_media']
                    text += f"• Социальные сети и сайты:\n"
                    if social.get('site'):
                        text += f"  - Официальный сайт: {social['site']}\n"
                    if social.get('tg'):
                        text += f"  - Telegram канал: {social['tg']}\n"
                    if social.get('vk'):
                        text += f"  - VKontakte: {social['vk']}\n"
                
                # Партнеры
                if json_data.get('partners'):
                    text += f"• Партнеры программы ({len(json_data['partners'])} партнеров):\n"
                    for partner in json_data['partners']:
                        # Извлекаем название партнера из URL изображения
                        partner_name = partner.split('/')[-1].replace('.png', '').replace('.jpg', '').upper()
                        text += f"  - {partner_name}\n"
                
                text += "\n"
            
            # Учебный план
            for block_name, block_data in program_data['блоки'].items():
                text += f"--- {block_name} ---\n"
                
                if 'трудоемкость_зе' in block_data:
                    text += f"Трудоемкость: {block_data['трудоемкость_зе']} з.е. ({block_data['трудоемкость_час']} час.)\n"
                
                # Обязательные дисциплины
                if 'обязательные_дисциплины_1_семестр' in block_data:
                    text += "\nОбязательные дисциплины (1 семестр):\n"
                    for disc in block_data['обязательные_дисциплины_1_семестр']:
                        text += f"- {disc['название']} ({disc['зе']} з.е., {disc['час']} час.)\n"
                
                # Выборные дисциплины по семестрам
                for sem in [1, 2, 3, 4]:
                    key = f'выборные_дисциплины_{sem}_семестр'
                    if key in block_data:
                        text += f"\nВыборные дисциплины ({sem} семестр):\n"
                        for disc in block_data[key]:
                            text += f"- {disc['название']} ({disc['зе']} з.е., {disc['час']} час.)\n"
                
                # Практики
                if 'практики' in block_data:
                    text += "\nПрактики:\n"
                    for pract in block_data['практики']:
                        text += f"- {pract['название']} ({pract['зе']} з.е., {pract['час']} час., {pract['семестр']} семестр)\n"
                
                # Аттестация
                if 'аттестация' in block_data:
                    text += "\nГосударственная итоговая аттестация:\n"
                    for att in block_data['аттестация']:
                        text += f"- {att['название']} ({att['зе']} з.е., {att['час']} час., {att['семестр']} семестр)\n"
                
                text += "\n"
            text += "\n" + "="*50 + "\n\n"
        
        return text
    
    def search_disciplines(self, query: str) -> List[Dict]:
        """Search for disciplines by query"""
        results = []
        query_lower = query.lower()
        
        for program_key, program_data in self.curriculum_data.items():
            program_name = program_data['название']
            
            for block_name, block_data in program_data['блоки'].items():
                # Поиск в обязательных дисциплинах
                if 'обязательные_дисциплины_1_семестр' in block_data:
                    for disc in block_data['обязательные_дисциплины_1_семестр']:
                        if query_lower in disc['название'].lower():
                            results.append({
                                'программа': program_name,
                                'блок': block_name,
                                'тип': 'Обязательная дисциплина',
                                'название': disc['название'],
                                'зе': disc['зе'],
                                'час': disc['час'],
                                'семестр': disc['семестр']
                            })
                
                # Поиск в выборных дисциплинах
                for sem in [1, 2, 3, 4]:
                    key = f'выборные_дисциплины_{sem}_семестр'
                    if key in block_data:
                        for disc in block_data[key]:
                            if query_lower in disc['название'].lower():
                                results.append({
                                    'программа': program_name,
                                    'блок': block_name,
                                    'тип': 'Выборная дисциплина',
                                    'название': disc['название'],
                                    'зе': disc['зе'],
                                    'час': disc['час'],
                                    'семестр': disc['семестр']
                                })
                
                # Поиск в практиках
                if 'практики' in block_data:
                    for pract in block_data['практики']:
                        if query_lower in pract['название'].lower():
                            results.append({
                                'программа': program_name,
                                'блок': block_name,
                                'тип': 'Практика',
                                'название': pract['название'],
                                'зе': pract['зе'],
                                'час': pract['час'],
                                'семестр': pract['семестр']
                            })
        
        return results
    
    def get_program_info(self, program_name: str) -> Optional[Dict]:
        """Get information about specific program"""
        for program_key, program_data in self.curriculum_data.items():
            if program_name.lower() in program_data['название'].lower():
                return program_data
        return None
    
    def save_to_json(self, filename: str):
        """Save curriculum data to JSON file"""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.curriculum_data, f, ensure_ascii=False, indent=2)